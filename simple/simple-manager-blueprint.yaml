tosca_definitions_version: cloudify_dsl_1_1

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.2/plugin.yaml
  - manager-types.yaml




inputs:

  public_ip:
    type: string

  private_ip:
    type: string

  ssh_user:
    type: string

  ssh_key_filename:
    type: string

  agents_user:
    default: ubuntu
    type: string

  resources_prefix:
    default: ''
    type: string

  #############################
  # Cloudify Modules
  #############################
  rest_service_source_url:
    type: string
    default: https://github.com/cloudify-cosmo/cloudify-manager/archive/3.2.tar.gz

  dsl_parser_source_url:
    type: string
    default: https://github.com/cloudify-cosmo/cloudify-dsl-parser/archive/3.2.tar.gz

  rest_client_source_url:
    type: string
    default: https://github.com/cloudify-cosmo/cloudify-rest-client/archive/3.2.tar.gz

  plugins_common_source_url:
    type: string
    default: https://github.com/cloudify-cosmo/cloudify-plugins-common/archive/3.2.tar.gz

  script_plugin_source_url:
    type: string
    default: https://github.com/cloudify-cosmo/flask-securest/archive/3.2.tar.gz

  securest_source_url:
    type: string
    default: https://github.com/cloudify-cosmo/cloudify-manager/archive/3.2.tar.gz

  amqpinflux_source_url:
    type: string
    default: https://github.com/cloudify-cosmo/cloudify-amqp-influxdb/archive/3.2.tar.gz

  #############################
  # Python Inputs
  #############################
  pip_version:
    type: string
    default: ''

  virtualenv_version:
    type: string
    default: ''

  #############################
  # RabbitMQ Inputs
  #############################
  erlang_source_url:
    type: string
    default: http://www.rabbitmq.com/releases/erlang/erlang-17.4-1.el6.x86_64.rpm

  rabbitmq_source_url:
    type: string
    default: http://www.rabbitmq.com/releases/rabbitmq-server/v3.5.3/rabbitmq-server-3.5.3-1.noarch.rpm

  #############################
  # Elasticsearch Inputs
  #############################
  elasticsearch_source_url:
    type: string
    default: https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.4.3.tar.gz

  elasticsearch_port:
    type: integer
    default: 9200

  elasticsearch_discovery_port:
    type: integer
    default: 54329

  elasticsearch_java_opts:
    type: string
    default: "-Xmx1024m -Xms1024m"

  #############################
  # Logstash Inputs
  #############################
  logstash_source_url:
    type: string
    default: https://download.elasticsearch.org/logstash/logstash/logstash-1.4.2.tar.gz

  #############################
  # InfluxDB Inputs
  #############################
  influxdb_source_url:
    type: string
    default: http://get.influxdb.org/influxdb-0.8.8-1.x86_64.rpm

  influxdb_port:
    type: integer
    default: 8086

  #############################
  # Riemann Inputs
  #############################
  langohr_source_url:
    type: string
    default: https://s3-eu-west-1.amazonaws.com/gigaspaces-repository-eu/langohr/2.11.0/langohr.jar

  daemonize_source_url:
    type: string
    default: https://forensics.cert.org/centos/cert/7/x86_64/daemonize-1.7.3-7.el7.x86_64.rpm

  riemann_source_url:
    type: string
    default: https://aphyr.com/riemann/riemann-0.2.6-1.noarch.rpm

  #############################
  # Rest Service Inputs
  #############################
  rest_service_port:
    type: integer
    default: 8100

  gunicorn_workers:
    type: integer
    default: ''

  #############################
  # WebUI Inputs
  #############################
  webui_source_url:
    type: string
    default: https://dl.dropboxusercontent.com/u/407576/cosmo-ui-3.2.0-m4.tgz

  grafana_source_url:
    type: string
    default: https://dl.dropboxusercontent.com/u/407576/grafana-1.9.0.tgz

  nodejs_source_url:
    type: string
    default: http://nodejs.org/dist/v0.10.35/node-v0.10.35-linux-x64.tar.gz

  webui_backend_port:
    type: integer
    default: 9001

node_templates:
  manager_host:
    type: cloudify.nodes.Compute
    properties:
      install_agent: false
      ip: { get_input: public_ip }

  ######################################################################
  # The Python and Java hosts are used to provide runtime environments
  # on specific hosts. It allows us to define the runtime environment
  # and install it only once per host and then have a node depend on it.
  ######################################################################
  python_host:
    type: manager.nodes.PythonHost
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host

  java_host:
    type: manager.nodes.JavaHost
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host

  ######################################################################
  # These are the nodes comprising the Cloudify Manager's components
  ######################################################################
  rabbitmq:
    type: manager.nodes.RabbitMQ
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host

  elasticsearch:
    type: manager.nodes.Elasticsearch
    relationships:
      - type: cloudify.relationships.contained_in
        target: java_host

  # logstash:
  #   type: manager.nodes.Logstash
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: java_host
  #     - type: logstash_to_elasticsearch
  #       target: elasticsearch

  # influxdb:
  #   type: manager.nodes.InfluxDB
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: manager_host

  nginx:
    type: manager.nodes.Nginx
    relationships:
      - type: cloudify.relationships.contained_in
        target: manager_host
      # - type: nginx_to_webui
      #   target: webui
      - type: nginx_to_restservice
        target: restservice

  # riemann:
  #   type: manager.nodes.Riemann
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: java_host
  #     - type: riemann_to_rabbitmq
  #       target: rabbitmq
  #     - type: riemann_to_nginx
  #       target: nginx

  restservice:
    type: manager.nodes.RestService
    relationships:
      - type: cloudify.relationships.contained_in
        target: python_host
      - type: restservice_to_elasticsearch
        target: elasticsearch
      - type: restservice_to_rabbitmq
        target: rabbitmq

  # mgmtworker:
  #   type: manager.nodes.ManagementWorker
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: python_host
  #     - type: mgmtworker_to_rabbitmq
  #       target: rabbitmq
  #     - type: mgmtworker_to_nginx
  #       target: nginx

  # amqpinflux:
  #   type: manager.nodes.AmqpInfluxBroker
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: python_host
  #     - type: amqpinflux_to_rabbitmq
  #       target: rabbitmq
  #     - type: amqpinflux_to_influxdb
  #       target: influxdb

  # webui:
  #   type: manager.nodes.WebUI
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: manager_host
  #     - type: webui_to_influxdb
  #       target: influxdb

  provider_context:
    type: cloudify.nodes.Root
    relationships:
      - type: cloudify.relationships.depends_on
        target: restservice
      - type: cloudify.relationships.depends_on
        target: nginx
    interfaces:
      cloudify.interfaces.lifecycle:
        create: components/upload_provider_context.sh

  # manager:
  #   type: cloudify.nodes.CloudifyManager
  #   properties:
  #     cloudify_packages:
  #       agents:
  #         ubuntu_agent_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.3.0/m1-RELEASE/cloudify-ubuntu-agent_3.3.0-m1-b270_amd64.deb
  #         centos_agent_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.3.0/m1-RELEASE/cloudify-centos-final-agent_3.3.0-m1-b270_amd64.deb
  #         windows_agent_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.3.0/m1-RELEASE/cloudify-windows-agent_3.3.0-m1-b270_amd64.deb
  #       docker:
  #          docker_url: http://gigaspaces-repository-eu.s3.amazonaws.com/org/cloudify3/3.3.0/m1-RELEASE/cloudify-docker_3.3.0-m1-b270.tar

  #     cloudify:
  #       resources_prefix: { get_input: resources_prefix }

  #       cloudify_agent:
  #         min_workers: 0
  #         max_workers: 5
  #         remote_execution_port: 22
  #         user: { get_input: agents_user }

  #       workflows:
  #         task_retries: -1  # this means forever
  #         task_retry_interval: 30

  #       policy_engine:
  #         start_timeout: 30

  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: manager_host
  #   interfaces:
  #     cloudify.interfaces.lifecycle:
  #       start:
  #         implementation: fabric.fabric_plugin.tasks.run_module_task
  #         inputs:
  #           task_mapping: cloudify_cli.bootstrap.tasks.bootstrap_docker
  #           task_properties:
  #             cloudify_packages: { get_property: [manager, cloudify_packages] }
  #             agent_local_key_path: { get_input: ssh_key_filename }
  #             manager_private_ip: { get_input: private_ip }
  #           fabric_env:
  #             user: { get_input: ssh_user }
  #             key_filename: { get_input: ssh_key_filename }
  #       stop:
  #         implementation: fabric.fabric_plugin.tasks.run_module_task
  #         inputs:
  #           task_mapping: cloudify_cli.bootstrap.tasks.stop_manager_container
  #           fabric_env:
  #             user: { get_input: ssh_user }
  #             key_filename: { get_input: ssh_key_filename }
  #       delete:
  #         implementation: fabric.fabric_plugin.tasks.run_module_task
  #         inputs:
  #           task_mapping: cloudify_cli.bootstrap.tasks.stop_docker_service
  #           fabric_env:
  #             user: { get_input: ssh_user }
  #             key_filename: { get_input: ssh_key_filename }
  #     cloudify.interfaces.validation:
  #       creation:
  #         implementation: cli.cloudify_cli.bootstrap.tasks.creation_validation
  #         inputs:
  #           cloudify_packages: { get_property: [manager, cloudify_packages] }

plugins:
  cli:
    install: false
    executor: central_deployment_agent

outputs:
  manager_ip:
    value: { get_property: [manager_host, ip] }
